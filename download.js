// download.js - Advanced PDF Report Generation with Modern Design

// ======================
// GLOBAL CONFIGURATION
// ======================
const CONFIG = {
  // Branding
  BRAND_LOGO: 'logo.jpg',
  LOGO_SIZE: { width: 40, height: 15 },
  LOGO_POSITION: { x: 20, y: 10 },
  
  // Color Scheme
  COLORS: {
    primary: [40, 53, 147],   // Deep blue
    secondary: [76, 201, 240], // Teal
    success: [56, 176, 72],   // Green
    warning: [248, 150, 30],  // Orange
    danger: [247, 37, 133],   // Pink
    dark: [33, 37, 41],       // Dark gray
    light: [248, 249, 250]    // Light gray
  },
  
  // Typography
  FONTS: {
    primary: 'helvetica',
    secondary: 'courier'
  },
  
  // Layout
  MARGINS: {
    left: 20,
    right: 20,
    top: 30,
    bottom: 30
  }
};

// ======================
// CORE FUNCTIONALITY
// ======================

/**
 * Initialize PDF Generation System
 */
class PDFGenerator {
  constructor() {
    this.doc = null;
    this.currentY = CONFIG.MARGINS.top + 40;
  }
  
  /**
   * Create a new PDF document with modern styling
   */
  async createDocument(report) {
    await this._loadDependencies();
    this._initDocument();
    await this._addBranding();
    this._addReportHeader(report);
    this._addMetadataSection(report);
    this._addContentSection(report);
    this._addFooter();
    return this.doc;
  }
  
  // Private methods
  async _loadDependencies() {
    if (!window.jspdf) {
      await new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js';
        script.onload = resolve;
        script.onerror = reject;
        document.head.appendChild(script);
      });
    }
  }
  
  _initDocument() {
    const { jsPDF } = window.jspdf;
    this.doc = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    });
    this.doc.setProperties({
      title: 'Professional Report',
      subject: 'Generated by ReportHub',
      author: 'ReportHub Team'
    });
  }
  
  async _addBranding() {
    try {
      const logo = await this._loadImage(CONFIG.BRAND_LOGO);
      this.doc.addImage(
        logo, 
        'JPEG', 
        CONFIG.LOGO_POSITION.x, 
        CONFIG.LOGO_POSITION.y, 
        CONFIG.LOGO_SIZE.width, 
        CONFIG.LOGO_SIZE.height
      );
    } catch {
      this._addTextLogo();
    }
  }
  
  _addTextLogo() {
    this.doc.setFont(CONFIG.FONTS.secondary, 'bold');
    this.doc.setFontSize(14);
    this.doc.setTextColor(...CONFIG.COLORS.primary);
    this.doc.text('REPORT HUB', CONFIG.LOGO_POSITION.x, CONFIG.LOGO_POSITION.y + 10);
  }
  
  _addReportHeader(report) {
    // Title with gradient effect simulation
    this.doc.setFontSize(22);
    this.doc.setFont(CONFIG.FONTS.primary, 'bold');
    this.doc.setTextColor(...CONFIG.COLORS.primary);
    this.doc.text(report.title, 105, 40, { align: 'center' });
    
    // Decorative line
    this._addDecorativeLine(35);
    this.currentY = 50;
  }
  
  _addMetadataSection(report) {
    // Left column
    this.doc.setFontSize(12);
    this.doc.setTextColor(...CONFIG.COLORS.dark);
    
    const metadata = [
      `Report ID: #REP-${report.id.toString().padStart(3, '0')}`,
      `Author: ${report.author_name}`,
      `Date: ${new Date(report.created_at).toLocaleDateString()}`,
      `Category: ${report.category}`
    ];
    
    metadata.forEach((text, i) => {
      this.doc.text(text, CONFIG.MARGINS.left, this.currentY + (i * 10));
    });
    
    // Right column - Status badge
    this._addStatusBadge(report.status, 150, 45);
    
    this.currentY += 50;
    this._addContentSeparator();
  }
  
  _addStatusBadge(status, x, y) {
    const statusConfig = {
      approved: { color: CONFIG.COLORS.success, text: '‚úì Approved' },
      pending: { color: CONFIG.COLORS.warning, text: '‚è≥ Pending' },
      rejected: { color: CONFIG.COLORS.danger, text: '‚úó Rejected' }
    };
    
    const config = statusConfig[status] || statusConfig.pending;
    
    // Badge background
    this.doc.setFillColor(...config.color);
    this.doc.roundedRect(x, y, 40, 15, 3, 3, 'F');
    
    // Badge text
    this.doc.setFontSize(10);
    this.doc.setTextColor(255, 255, 255);
    this.doc.text(config.text, x + 20, y + 9, { align: 'center' });
  }
  
  _addContentSeparator() {
    this.doc.setDrawColor(200, 200, 200);
    this.doc.line(
      CONFIG.MARGINS.left, 
      this.currentY, 
      210 - CONFIG.MARGINS.right, 
      this.currentY
    );
    this.currentY += 10;
  }
  
  _addDecorativeLine(y) {
    this.doc.setDrawColor(...CONFIG.COLORS.secondary);
    this.doc.setLineWidth(0.5);
    this.doc.line(70, y, 140, y);
    
    // Add small circles at ends
    this.doc.setFillColor(...CONFIG.COLORS.secondary);
    this.doc.circle(70, y, 1, 'F');
    this.doc.circle(140, y, 1, 'F');
  }
  
  _addContentSection(report) {
    // Main content
    this.doc.setFontSize(12);
    this.doc.setTextColor(50, 50, 50);
    const descLines = this.doc.splitTextToSize(report.description, 170);
    this.doc.text(descLines, CONFIG.MARGINS.left, this.currentY + 15);
    this.currentY = this.doc.previousAutoTable ? this.doc.previousAutoTable.finalY : this.currentY + (descLines.length * 6);
    
    // Admin comments (if exists)
    if (report.admin_comments) {
      this._addSectionHeader('ADMIN COMMENTS', this.currentY + 20);
      
      this.doc.setFontSize(11);
      this.doc.setTextColor(70, 70, 70);
      const commentLines = this.doc.splitTextToSize(report.admin_comments, 170);
      this.doc.text(commentLines, CONFIG.MARGINS.left, this.currentY + 30);
      this.currentY += 30 + (commentLines.length * 5);
    }
    
    // Attachments (if exists)
    if (report.attachments?.length > 0) {
      this._addSectionHeader('ATTACHMENTS', this.currentY + 20);
      
      report.attachments.forEach((attachment, i) => {
        const yPos = this.currentY + 30 + (i * 7);
        
        // File name with link
        this.doc.setFontSize(10);
        this.doc.setTextColor(...CONFIG.COLORS.primary);
        this.doc.textWithLink(
          `üìé ${attachment.name}`,
          CONFIG.MARGINS.left,
          yPos,
          { url: attachment.url }
        );
        
        // File size
        this.doc.setTextColor(100, 100, 100);
        this.doc.text(
          this._formatFileSize(attachment.size),
          190,
          yPos,
          { align: 'right' }
        );
      });
    }
  }
  
  _addSectionHeader(title, y) {
    this.doc.setFontSize(12);
    this.doc.setFont(CONFIG.FONTS.primary, 'bold');
    this.doc.setTextColor(...CONFIG.COLORS.primary);
    this.doc.text(title, CONFIG.MARGINS.left, y);
    
    // Underline
    this.doc.setDrawColor(...CONFIG.COLORS.secondary);
    this.doc.line(
      CONFIG.MARGINS.left, 
      y + 2, 
      CONFIG.MARGINS.left + 40, 
      y + 2
    );
  }
  
  _addFooter() {
    const pageCount = this.doc.internal.getNumberOfPages();
    
    for (let i = 1; i <= pageCount; i++) {
      this.doc.setPage(i);
      
      // Footer line
      this.doc.setDrawColor(200, 200, 200);
      this.doc.line(
        CONFIG.MARGINS.left,
        280,
        210 - CONFIG.MARGINS.right,
        280
      );
      
      // Page info
      this.doc.setFontSize(8);
      this.doc.setTextColor(150, 150, 150);
      this.doc.text(
        `Page ${i} of ${pageCount} | Generated on ${new Date().toLocaleString()}`,
        105,
        285,
        { align: 'center' }
      );
      
      // Copyright
      this.doc.text(
        `¬© ${new Date().getFullYear()} ReportHub. All rights reserved.`,
        105,
        290,
        { align: 'center' }
      );
    }
  }
  
  async _loadImage(url) {
    return new Promise((resolve, reject) => {
      const img = new Image();
      img.onload = () => resolve(img);
      img.onerror = reject;
      img.src = url;
    });
  }
  
  _formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2) + ' ' + sizes[i];
  }
}

// ======================
// USER INTERFACE
// ======================

/**
 * Download Report as PDF
 */
async function downloadReportAsPDF(reportId) {
  try {
    showNotification('üöÄ Preparing your professional report...', 'info');
    
    // Fetch report data
    const report = await fetchReportData(reportId);
    
    // Generate PDF
    const generator = new PDFGenerator();
    const pdf = await generator.createDocument(report);
    
    // Download
    const fileName = `Report_${sanitizeFilename(report.title)}_${report.id}.pdf`;
    pdf.save(fileName);
    
    showNotification('‚úÖ Report downloaded successfully!', 'success');
  } catch (error) {
    console.error('PDF Generation Error:', error);
    showNotification('‚ùå Failed to generate report', 'danger');
  }
}

async function fetchReportData(reportId) {
  const response = await fetch(`${API_BASE_URL}/reports/${reportId}`, {
    headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }
  });
  if (!response.ok) throw new Error('Failed to fetch report');
  return await response.json();
}

function sanitizeFilename(name) {
  return name.replace(/[^a-zA-Z0-9\s]/g, '').replace(/\s+/g, '_');
}

// ======================
// NOTIFICATION SYSTEM
// ======================

function showNotification(message, type = 'info') {
  const toast = document.createElement('div');
  toast.className = `pdf-toast pdf-toast-${type}`;
  
  toast.innerHTML = `
    <div class="pdf-toast-content">
      <span class="pdf-toast-message">${message}</span>
      <button class="pdf-toast-close">&times;</button>
    </div>
  `;
  
  document.body.appendChild(toast);
  
  // Auto-remove after 5 seconds
  setTimeout(() => toast.classList.add('pdf-toast-fadeout'), 5000);
  
  // Manual close
  toast.querySelector('.pdf-toast-close').addEventListener('click', () => {
    toast.remove();
  });
  
  // Remove after animation
  toast.addEventListener('animationend', (e) => {
    if (e.animationName === 'pdfToastFadeOut') toast.remove();
  });
}

// Inject modern toast styles
const toastStyles = `
.pdf-toast {
  position: fixed;
  bottom: 25px;
  right: 25px;
  min-width: 300px;
  max-width: 350px;
  background: white;
  border-radius: 8px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
  overflow: hidden;
  z-index: 10000;
  animation: pdfToastFadeIn 0.3s ease-out;
  transform: translateY(20px);
  opacity: 0;
  animation-fill-mode: forwards;
}

.pdf-toast-content {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 15px 20px;
}

.pdf-toast-message {
  font-family: 'Segoe UI', system-ui, sans-serif;
  font-size: 14px;
  line-height: 1.4;
}

.pdf-toast-close {
  background: none;
  border: none;
  font-size: 18px;
  cursor: pointer;
  opacity: 0.7;
  transition: opacity 0.2s;
  margin-left: 15px;
}

.pdf-toast-close:hover {
  opacity: 1;
}

.pdf-toast-fadeout {
  animation: pdfToastFadeOut 0.3s ease-in forwards;
}

/* Type colors */
.pdf-toast-info {
  border-left: 4px solid #4895ef;
}

.pdf-toast-success {
  border-left: 4px solid #4cc9f0;
}

.pdf-toast-danger {
  border-left: 4px solid #f72585;
}

/* Animations */
@keyframes pdfToastFadeIn {
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes pdfToastFadeOut {
  from {
    transform: translateY(0);
    opacity: 1;
  }
  to {
    transform: translateY(20px);
    opacity: 0;
  }
}
`;

// Add styles to document
const styleEl = document.createElement('style');
styleEl.innerHTML = toastStyles;
document.head.appendChild(styleEl);

// ======================
// INITIALIZATION
// ======================

function initializePDFGenerator() {
  // Event delegation for download buttons
  document.addEventListener('click', (e) => {
    const btn = e.target.closest('[data-action="download-pdf"]');
    if (btn) {
      e.preventDefault();
      downloadReportAsPDF(btn.dataset.reportId);
    }
  });
  
  // Load jsPDF if not already loaded
  if (!window.jspdf) {
    const script = document.createElement('script');
    script.src = 'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js';
    document.head.appendChild(script);
  }
}

// Initialize when ready
if (document.readyState === 'complete') {
  initializePDFGenerator();
} else {
  document.addEventListener('DOMContentLoaded', initializePDFGenerator);
}
