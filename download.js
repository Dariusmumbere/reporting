// download.js - Report PDF generation and download functionality

// Function to generate a PDF from a report
async function generateReportPDF(report) {
    // Create a new PDF document
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();
    
    // Add ReportHub logo (placeholder - in a real app, use your actual logo)
    doc.addImage('https://via.placeholder.com/150x50?text=ReportHub', 'PNG', 20, 10, 40, 15);
    
    // Report title
    doc.setFontSize(20);
    doc.setTextColor(40, 53, 147); // Dark blue color
    doc.text(report.title, 105, 30, { align: 'center' });
    
    // Report metadata
    doc.setFontSize(12);
    doc.setTextColor(100, 100, 100); // Gray color
    doc.text(`Report ID: #REP-${report.id.toString().padStart(3, '0')}`, 20, 50);
    doc.text(`Author: ${report.author_name}`, 20, 60);
    doc.text(`Date: ${new Date(report.created_at).toLocaleDateString()}`, 20, 70);
    doc.text(`Category: ${report.category}`, 20, 80);
    
    // Status badge
    let statusColor;
    if (report.status === 'approved') {
        statusColor = [76, 201, 240]; // Success blue
    } else if (report.status === 'pending') {
        statusColor = [248, 150, 30]; // Warning orange
    } else {
        statusColor = [247, 37, 133]; // Danger pink
    }
    
    doc.setFillColor(...statusColor);
    doc.setDrawColor(...statusColor);
    doc.roundedRect(150, 45, 40, 15, 3, 3, 'FD');
    doc.setTextColor(255, 255, 255);
    doc.text(report.status.charAt(0).toUpperCase() + report.status.slice(1), 170, 55, { align: 'center' });
    
    // Horizontal line
    doc.setDrawColor(200, 200, 200);
    doc.line(20, 85, 190, 85);
    
    // Report description
    doc.setFontSize(12);
    doc.setTextColor(50, 50, 50);
    const descriptionLines = doc.splitTextToSize(report.description, 170);
    doc.text(descriptionLines, 20, 100);
    
    // Admin comments (if exists)
    if (report.admin_comments) {
        doc.setFontSize(12);
        doc.setTextColor(100, 100, 100);
        doc.text('Admin Comments:', 20, doc.autoTable.previous.finalY + 15);
        
        doc.setFontSize(11);
        doc.setTextColor(70, 70, 70);
        const commentLines = doc.splitTextToSize(report.admin_comments, 170);
        doc.text(commentLines, 20, doc.autoTable.previous.finalY + 25);
    }
    
    // Attachments list
    if (report.attachments && report.attachments.length > 0) {
        doc.setFontSize(12);
        doc.setTextColor(100, 100, 100);
        doc.text('Attachments:', 20, doc.autoTable.previous.finalY + 15);
        
        doc.setFontSize(10);
        report.attachments.forEach((attachment, index) => {
            const yPos = doc.autoTable.previous.finalY + 25 + (index * 7);
            doc.setTextColor(67, 97, 238); // Primary color
            doc.textWithLink(attachment.name, 20, yPos, { url: attachment.url });
            doc.setTextColor(100, 100, 100);
            doc.text(`(${formatFileSize(attachment.size)})`, 170, yPos, { align: 'right' });
        });
    }
    
    // Footer
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(8);
        doc.setTextColor(150, 150, 150);
        doc.text(`Page ${i} of ${pageCount}`, 105, 285, { align: 'center' });
        doc.text(`Generated by ReportHub on ${new Date().toLocaleDateString()}`, 105, 290, { align: 'center' });
    }
    
    return doc;
}

// Function to download a report as PDF
async function downloadReportAsPDF(reportId) {
    try {
        // Show loading state
        const loadingToast = showToast('Generating PDF...', 'info');
        
        // Fetch report data
        const response = await fetch(`${API_BASE_URL}/reports/${reportId}`, {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });
        
        if (!response.ok) {
            throw new Error('Failed to fetch report data');
        }
        
        const report = await response.json();
        
        // Generate PDF
        const pdfDoc = await generateReportPDF(report);
        
        // Download the PDF
        pdfDoc.save(`ReportHub-${report.title}-${report.id}.pdf`);
        
        // Close loading toast
        loadingToast.close();
        
        // Show success message
        showToast('PDF downloaded successfully', 'success');
    } catch (error) {
        console.error('Error downloading report as PDF:', error);
        showToast('Failed to generate PDF', 'danger');
    }
}

// Helper function to format file size
function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2) + ' ' + sizes[i];
}

// Helper function to show toast messages
function showToast(message, type) {
    const toast = document.createElement('div');
    toast.className = `toast toast-${type} fade-in`;
    toast.innerHTML = `
        <div class="toast-message">${message}</div>
    `;
    
    document.body.appendChild(toast);
    
    // Auto-remove after 5 seconds
    setTimeout(() => {
        toast.classList.add('fade-out');
        setTimeout(() => toast.remove(), 300);
    }, 5000);
    
    return {
        close: () => {
            toast.classList.add('fade-out');
            setTimeout(() => toast.remove(), 300);
        }
    };
}

// Add CSS for toast notifications
const toastStyles = document.createElement('style');
toastStyles.innerHTML = `
.toast {
    position: fixed;
    bottom: 20px;
    right: 20px;
    padding: 12px 20px;
    border-radius: var(--radius);
    box-shadow: var(--shadow-md);
    color: white;
    z-index: 10000;
    transform: translateY(20px);
    opacity: 0;
    transition: all 0.3s ease;
    max-width: 300px;
}

.toast.fade-in {
    transform: translateY(0);
    opacity: 1;
}

.toast.fade-out {
    transform: translateY(-20px);
    opacity: 0;
}

.toast-success {
    background-color: var(--success-color);
}

.toast-danger {
    background-color: var(--danger-color);
}

.toast-info {
    background-color: var(--accent-color);
}

.toast-warning {
    background-color: var(--warning-color);
}
`;
document.head.appendChild(toastStyles);

// Add event listeners for download buttons
document.addEventListener('DOMContentLoaded', () => {
    // Delegate download button clicks
    document.addEventListener('click', async (e) => {
        if (e.target.closest('.download-report-btn')) {
            const btn = e.target.closest('.download-report-btn');
            const reportId = btn.getAttribute('data-id');
            await downloadReportAsPDF(reportId);
        }
    });
    
    // Update existing report buttons to include download functionality
    const updateReportButtons = () => {
        document.querySelectorAll('.view-report-btn').forEach(btn => {
            const reportId = btn.getAttribute('data-id');
            const actionsCell = btn.closest('td');
            
            // Check if download button already exists
            if (!actionsCell.querySelector('.download-report-btn')) {
                const downloadBtn = document.createElement('button');
                downloadBtn.className = 'action-btn download-report-btn';
                downloadBtn.setAttribute('data-id', reportId);
                downloadBtn.title = 'Download';
                downloadBtn.innerHTML = '<i class="fas fa-download"></i>';
                
                // Insert after view button
                btn.parentNode.insertBefore(downloadBtn, btn.nextSibling);
            }
        });
    };
    
    // Run initially and after any dynamic content loads
    updateReportButtons();
    
    // If using a framework that dynamically loads content, you might need to call
    // updateReportButtons() after content changes
});

// Add jsPDF library if not already loaded
function loadJSPDFLibrary() {
    return new Promise((resolve, reject) => {
        if (window.jspdf) {
            resolve();
            return;
        }
        
        const script = document.createElement('script');
        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js';
        script.onload = resolve;
        script.onerror = reject;
        document.head.appendChild(script);
    });
}

// Initialize the PDF library when the page loads
window.addEventListener('load', async () => {
    try {
        await loadJSPDFLibrary();
        console.log('jsPDF library loaded successfully');
    } catch (error) {
        console.error('Failed to load jsPDF library:', error);
        showToast('Failed to load PDF generator', 'danger');
    }
});
